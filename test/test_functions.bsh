SVUnitVersion=`cat $SVUNIT_INSTALL/VERSION.txt`
create_unit_test() {
  create_unit_test.pl $1
}

declare -a SVUNIT_SIMULATORS
set_simulators() {
  if [ `which irun` ]; then
    SVUNIT_SIMULATORS[${#SVUNIT_SIMULATORS[*]}]="irun"
  fi
  if [ `which vcs` ]; then
    SVUNIT_SIMULATORS[${#SVUNIT_SIMULATORS[*]}]="vcs"
  fi
  if [ `which vlog` ]; then
    SVUNIT_SIMULATORS[${#SVUNIT_SIMULATORS[*]}]="modelsim"
  fi

  if [ "${#SVUNIT_SIMULATORS[*]}" == "0" ]; then
    echo None of irun, modelsim or vcs are in your path. You need at least 1 simulator to regress svunit-code!
    exit 1
  fi
}

setup() {
  ./clean
}

golden_module_unit_test() {
  sed -e "s/FILE/$1/" $SVUNIT_INSTALL/test/templates/module_unit_test.gold | sed -e "s/MYNAME/$2/g" > ${1}_unit_test.gold
}

golden_if_unit_test() {
  sed -e "s/FILE/$1/" $SVUNIT_INSTALL/test/templates/if_unit_test.gold | sed -e "s/MYNAME/$2/g" > ${1}_unit_test.gold
}

golden_class_unit_test() {
  sed -e "s/FILE/$1/" $SVUNIT_INSTALL/test/templates/class_unit_test.gold | sed -e "s/MYNAME/$2/g" > ${1}_unit_test.gold
}

golden_testsuite_with_1_unittest() {
  sed -e "s/MYNAME/$1/g" $SVUNIT_INSTALL/test/templates/testsuite_with_1_unittest.gold > testsuite.gold
}

golden_testsuite_with_2_unittest() {
  sed -e "s/MYNAME1/$1/g" $SVUNIT_INSTALL/test/templates/testsuite_with_2_unittest.gold > testsuite.gold
  sed -i "s/MYNAME2/$2/g" testsuite.gold
}

golden_testrunner_with_1_testsuite() {
  cp $SVUNIT_INSTALL/test/templates/testrunner_with_1_testsuite.gold testrunner.gold
}

golden_testrunner_with_2_testsuites() {
  cp $SVUNIT_INSTALL/test/templates/testrunner_with_2_testsuite.gold testrunner.gold
}

golden_testrunner_with_3_testsuites() {
  cp $SVUNIT_INSTALL/test/templates/testrunner_with_3_testsuite.gold testrunner.gold
}

golden_testrunner_with_4_testsuites() {
  cp $SVUNIT_INSTALL/test/templates/testrunner_with_4_testsuite.gold testrunner.gold
}

verify_file() {
  if [ "`diff -wbB $1 $2`" != "" ]; then
    echo $1 failed;
    exit 1;
  fi
}

verify_testsuite() {
  #PWD=`pwd | sed -e "s/[\/-]/_/g"`
  PWD="_"
  sed -e "s/PWD/$PWD$2/g" $1 > .$1
  verify_file .$1 .${PWD}${2}_testsuite.sv
}

verify_testrunner() {
  tr=.testrunner.sv
  if [ "$6" != "" ]; then
    tr=$6
  fi
  sed -e "s/TS0/$2/g" $1 | \
    sed -e "s/TS1/$3/g" | \
    sed -e "s/TS2/$4/g" | \
    sed -e "s/TS3/$5/g" > .$1
  verify_file .$1 $tr
}

expect_file() {
  if [ ! -e $1 ]; then
    echo $1 not created
    exit 1
  fi
}

expect_eq() {
  if [ "$1" != "$2" ]; then
    exit 1
  fi
}

expect_return_code() {
  if [ "$?" != "$1" ]; then
    echo bad return code $?
    exit 1
  fi
}

expect_file_does_contain() {
  grep "$1" $2 >/dev/null
  if [ "$?" != "0" ]; then
    echo bad result for does contain - $1
    exit 1;
  fi
}

expect_file_does_not_contain() {
  grep "$1" $2 >/dev/null
  if [ "$?" == "0" ]; then
    echo bad result for does not contain - $1
    exit 1;
  fi
}

expect_testrunner_pass() {
  grep "INFO:  \[.*\]\[testrunner\]: PASSED (. of . suites passing) \[$SVUnitVersion\]" $1 >/dev/null
  if [ "$?" != "0" ]; then
    echo PASS not detected from Testrunner in $1
    exit 1;
  fi
}

expect_testrunner_fail() {
  grep "INFO:  \[.*\]\[testrunner\]: FAILED" $1 >/dev/null
  if [ "$?" != "0" ]; then
    echo PASS not detected from Testrunner in $1
    exit 1;
  fi
}

expect_string() {
  grep "$1" $2 >/dev/null
  if [ "$?" != "0" ]; then
    echo "$1" not detected in $2
    exit 1;
  fi
}


expect_passing_example() {
  pushd . >/dev/null

  cd $1

  runSVUnit -s $2

  # check the log output for a PASS from the testrunner
  expect_file run.log
  expect_testrunner_pass run.log

  popd >/dev/null
}

expect_uvm_passing_example() {
  pushd . >/dev/null

  mkdir temp
  cp $1/* temp
  cd temp
  cleanSVUnit

  create_unit_test.pl -overwrite -uvm $2
  runSVUnit -uvm -s $3

  # check the log output for a PASS from the testrunner
  expect_file run.log
  expect_testrunner_pass run.log

  popd >/dev/null
  rm -rf temp
}

clean() {
rm -f `find . -name *testsuite*`
rm -f `find . -name *testrunner*`
}
